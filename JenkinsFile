@Library('metrics@main') _

pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: 'Maven', type: 'hudson.tasks.Maven$MavenInstallation'
        NEXUS_URL = 'http://localhost:8088' // Replace with your Nexus server URL
        NEXUS_REPO = 'maven-local-snapshot' // Replace with your Nexus repository name
        NEXUS_CREDENTIALS_ID = 'artifactory-credentials' // Jenkins credentials ID for Nexus
        JOB_NAME = 'demo-job'
        INSTANCE_NAME = "${env.NODE_NAME}"
        APP_NAME = 'ABC'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], gitTool: 'windows-git', userRemoteConfigs: [[credentialsId: 'bitbucket-access-creds', url: 'https://github.com/MaheshGilbile/MyApps.git']])
                script {
                    def branchName = "${env.GIT_BRANCH}"
                    metrics(name: 'branch_name', help: 'Branch name', job: JOB_NAME, instance: INSTANCE_NAME, value: 1)
                }
            }
        }

        stage('Build') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        def buildStatus = "SUCCESS"
                        try {
                            bat "${MAVEN_HOME}/bin/mvn clean install"
                        } catch (Exception e) {
                            buildStatus = "FAILED"
                        } finally {
                            metrics(name: 'build_status', help: 'Build Status', job: JOB_NAME, instance: INSTANCE_NAME, value: (buildStatus == "SUCCESS" ? 1 : 0))
                        }
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        def testCoverage = 0
                        def testStatus = "FAILED"
                        try {
                            bat "${MAVEN_HOME}/bin/mvn clean test"
                            // Assuming your test framework generates a coverage report, parse it here
                            testCoverage = 85 // Example coverage percentage
                            testStatus = "SUCCESS"
                        } catch (Exception e) {
                            testCoverage = 0
                        } finally {
                            metrics(name: 'unit_test_coverage', help: 'Unit Test Coverage', job: JOB_NAME, instance: INSTANCE_NAME, value: testCoverage)
                            metrics(name: 'unit_test_status', help: 'Unit Test Status', job: JOB_NAME, instance: INSTANCE_NAME, value: (testStatus == "SUCCESS" ? 1 : 0))
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        withSonarQubeEnv('SonarQubeServer') {
                            bat "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=springboot-app"
                        }
                    }
                }
            }
        }

        stage('Artifactory Upload') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        def artifactoryStatus = "FAILED"
                        try {
                            withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                                bat "${MAVEN_HOME}/bin/mvn clean install"
								bat "${MAVEN_HOME}/bin/mvn deploy:deploy-file -Durl=${NEXUS_URL}/repository/${NEXUS_REPO} -DrepositoryId=nexus -Dfile=$WORKSPACE/target/springboot-app-1.0-SNAPSHOT.jar -DgroupId=com.example -DartifactId=springboot-app -Dversion=1.0 -Dpackaging=jar"
                                artifactoryStatus = "SUCCESS"
                            }
                        } catch (Exception e) {
                            artifactoryStatus = "FAILED"
                        } finally {
                            metrics(name: 'artifactory_upload_status', help: 'Artifactory Upload Status', job: JOB_NAME, instance: INSTANCE_NAME, value: (artifactoryStatus == "SUCCESS" ? 1 : 0))
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
            junit 'target/surefire-reports/*.xml'
        }
        failure {
            mail to: 'your-email@example.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something went wrong in the pipeline ${env.BUILD_URL}"
        }
    }
}

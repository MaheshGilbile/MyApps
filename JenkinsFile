@Library('metrics@main') _

pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: 'Maven', type: 'hudson.tasks.Maven$MavenInstallation'
        NEXUS_URL = 'http://localhost:8088' // Replace with your Nexus server URL
        NEXUS_REPO = 'maven-local-snapshot' // Replace with your Nexus repository name
        NEXUS_CREDENTIALS_ID = 'artifactory-credentials' // Jenkins credentials ID for Nexus
        JOB_NAME = 'demo-job'
        INSTANCE_NAME = "${env.NODE_NAME}"
        APP_NAME = 'ABC'
        startTime = null // Global variable to store overall build start time
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    startTime = new Date().getTime() // Start time at SCM checkout
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], gitTool: 'windows-git', userRemoteConfigs: [[credentialsId: 'bitbucket-access-creds', url: 'https://github.com/MaheshGilbile/MyApps.git']])
                    collectMetrics().collectBranchMetrics("${env.GIT_BRANCH}")
                }
            }
        }

        stage('Build') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        try {
                            bat "${MAVEN_HOME}/bin/mvn clean install"
                        } finally {
                            // No need to collect build metrics here; we'll do it after all stages complete
                        }
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        def testCoverage = 0
                        def testStatus = "FAILED"
                        try {
                            bat "${MAVEN_HOME}/bin/mvn clean test"
                            // Assuming your test framework generates a coverage report, parse it here
                            testCoverage = parseCoverageReport() // Function to parse coverage report, adjust as per your framework/tool
                            testStatus = "SUCCESS"
                        } catch (Exception e) {
                            testCoverage = 0
                        } finally {
                            collectMetrics().collectUnitTestCoverage(testCoverage)
                            collectMetrics().collectUnitTestStatus(testStatus)
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        withSonarQubeEnv('SonarQubeServer') {
                            bat "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=springboot-app"
                            // Collect SonarQube metrics
                            def sonarMetrics = collectSonarMetrics()
                            collectMetrics().collectSonarMetrics([
                                lines_of_code: sonarMetrics.linesOfCode,
                                bugs: sonarMetrics.bugs,
                                vulnerabilities: sonarMetrics.vulnerabilities,
                                code_smells: sonarMetrics.codeSmells
                            ])
                        }
                    }
                }
            }
        }

        stage('Artifactory Upload') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${WORKSPACE}/settings.xml")]) {
                    script {
                        def artifactoryStatus = "FAILED"
                        try {
                            withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                                bat "${MAVEN_HOME}/bin/mvn deploy -s ${WORKSPACE}/settings.xml"
                                artifactoryStatus = "SUCCESS"
                            }
                        } catch (Exception e) {
                            artifactoryStatus = "FAILED"
                        } finally {
                            collectMetrics().collectArtifactoryMetrics(artifactoryStatus)
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def endTime = new Date().getTime()
                def buildDuration = (endTime - startTime) / 1000.0 // in seconds

                // Calculate overall build status
                def overallBuildStatus = currentBuild.currentResult == 'SUCCESS' ? 'SUCCESS' : 'FAILED'

                // Collect overall build metrics
                def buildMetrics = [
                    build_duration: buildDuration,
                    overall_build_status: overallBuildStatus
                ]

                // Push metrics to Prometheus Pushgateway
                collectMetrics().pushToPushgateway("build_metrics", buildMetrics)
            }

            // Archive artifacts and run JUnit tests as before
            archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
            junit 'target/surefire-reports/*.xml'
        }

        failure {
            mail to: 'your-email@example.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something went wrong in the pipeline ${env.BUILD_URL}"
        }
    }
}

def parseCoverageReport() {
    def coverageFile = fileExists("${WORKSPACE}/target/site/jacoco/jacoco.xml")
    
    if (!coverageFile) {
        return 0.0
    }

    def xml = new XmlParser().parse(coverageFile)

    // Extract line coverage percentage
    def lineCoverage = xml.'counter'.find { it.@type == 'LINE' }?.@covered
    def totalLines = xml.'counter'.find { it.@type == 'LINE' }?.@missed.toInteger() + lineCoverage.toInteger()

    return (lineCoverage.toInteger() * 100.0) / totalLines
}

boolean fileExists(String path) {
    try {
        def file = new File(path)
        return file.exists()
    } catch (Exception e) {
        return false
    }
}


pipeline {
    agent { label 'worker1' }

    environment {
        SONARQUBE_SERVER = 'SonarQubeServer' // Name of the SonarQube server configured in Jenkins
        //MAVEN_HOME = tool name: 'Maven', type: 'hudson.tasks.Maven$MavenInstallation'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Determine the Git executable based on the node's OS
                    def gitTool = isUnix() ? 'linux-git' : 'windows-git'
                    def gitExe = tool name: gitTool, type: 'hudson.plugins.git.GitTool'

                    // Set the Git executable path in the environment
                    env.GIT_EXE = gitExe

                    // Use the appropriate Git executable for checkout
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/main']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        userRemoteConfigs: [[url: 'https://github.com/MaheshGilbile/MyApps.git', credentialsId: 'bitbucket-access']],
                        gitTool: env.GIT_EXE
                    ])
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Run Maven build
                    sh "${MAVEN_HOME}/bin/mvn clean install"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv('SonarQubeServer') {
                        sh "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=springboot-app"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube quality gate result
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }

    post {
        always {
            // Archive the build artifacts
            archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
            // Record test results
            junit 'target/surefire-reports/*.xml'
        }
        failure {
            // Notify about build failure
            mail to: 'team@example.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something went wrong in the pipeline ${env.BUILD_URL}"
        }
    }
}

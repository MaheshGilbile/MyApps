@Library('metrics@main') _

pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: 'Maven', type: 'hudson.tasks.Maven$MavenInstallation'
        NEXUS_URL = 'http://localhost:8088' // Replace with your Nexus server URL
        NEXUS_REPO = 'maven-local-snapshot' // Replace with your Nexus repository name
        NEXUS_CREDENTIALS_ID = 'artifactory-credentials' // Jenkins credentials ID for Nexus
        JOB_NAME = 'demo-job'
        INSTANCE_NAME = "${env.NODE_NAME}"
        APP_NAME = 'ABC'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], gitTool: 'windows-git', userRemoteConfigs: [[credentialsId: 'bitbucket-access-creds', url: 'https://github.com/MaheshGilbile/MyApps.git']])
                script {
                    def metrics = collectMetrics()
                    def branchName = "${env.GIT_BRANCH}"
                    metrics.collectBranchMetrics(branchName)
                }
            }
        }

        stage('Build') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        def metrics = collectMetrics()
                        def startTime = System.currentTimeMillis()
                        def buildStatus = "SUCCESS"
                        try {
                            bat "${MAVEN_HOME}/bin/mvn clean install"
                        } catch (Exception e) {
                            buildStatus = "FAILED"
                        } finally {
                            def duration = System.currentTimeMillis() - startTime
                            metrics.buildStageMetrics(buildStatus == "SUCCESS", duration)
                        }
                    }
                }
            }
        }

        stage('Unit Test') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        def metrics = collectMetrics()
                        try {
                            bat "${MAVEN_HOME}/bin/mvn clean test"
                            // Parse unit test coverage report and set coverage percentage
                            int coveragePercentage = parseCoverageReport()
                            metrics.unitTestCoverageMetrics(coveragePercentage)
                        } catch (Exception e) {
                            metrics.unitTestCoverageMetrics(0)
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${env.HOME}/.m2/settings.xml")]) {
                    script {
                        def metrics = collectMetrics()
                        boolean sonarStatus = false
                        withSonarQubeEnv('SonarQubeServer') {
                            try {
                                bat "${MAVEN_HOME}/bin/mvn sonar:sonar -Dsonar.projectKey=springboot-app"
                                sonarStatus = true
                            } catch (Exception e) {
                                sonarStatus = false
                            } finally {
                                metrics.sonarAnalysisMetrics(sonarStatus)
                            }
                        }
                    }
                }
            }
        }

        stage('Artifactory Upload') {
            steps {
                configFileProvider([configFile(fileId: 'settings.xml', targetLocation: "${WORKSPACE}/settings.xml")]) {
                    script {
                        def metrics = collectMetrics()
                        boolean uploadStatus = false
                        try {
                            withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                                bat "${MAVEN_HOME}/bin/mvn clean install"
                                bat "${MAVEN_HOME}/bin/mvn deploy -s ${WORKSPACE}/settings.xml"
                                uploadStatus = true
                            }
                        } catch (Exception e) {
                            uploadStatus = false
                        } finally {
                            metrics.artifactoryUploadMetrics(uploadStatus)
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def metrics = collectMetrics()
                def totalBuilds = metrics.getTotalBuilds()
                def successfulBuilds = metrics.getSuccessfulBuilds()
                def failedBuilds = metrics.getFailedBuilds()
                def averageBuildTime = metrics.getAverageBuildTime()
                def successRate = metrics.getSuccessRate()

                // Push these metrics to Prometheus or Pushgateway
                metrics.pushMetricsToPrometheus()
            }

            archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
            junit 'target/surefire-reports/*.xml'
        }

        failure {
            mail to: 'your-email@example.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Something went wrong in the pipeline ${env.BUILD_URL}"
        }
    }
}
